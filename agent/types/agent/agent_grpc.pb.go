// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LizardAgentClient is the client API for LizardAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LizardAgentClient interface {
	SetEnvironment(ctx context.Context, in *SetEnvironmentRequest, opts ...grpc.CallOption) (*Response, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Response, error)
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (LizardAgent_BackupClient, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (LizardAgent_RestoreClient, error)
}

type lizardAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLizardAgentClient(cc grpc.ClientConnInterface) LizardAgentClient {
	return &lizardAgentClient{cc}
}

func (c *lizardAgentClient) SetEnvironment(ctx context.Context, in *SetEnvironmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/setEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/createPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (LizardAgent_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &LizardAgent_ServiceDesc.Streams[0], "/agent.LizardAgent/backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &lizardAgentBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LizardAgent_BackupClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type lizardAgentBackupClient struct {
	grpc.ClientStream
}

func (x *lizardAgentBackupClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lizardAgentClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (LizardAgent_RestoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &LizardAgent_ServiceDesc.Streams[1], "/agent.LizardAgent/restore", opts...)
	if err != nil {
		return nil, err
	}
	x := &lizardAgentRestoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LizardAgent_RestoreClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type lizardAgentRestoreClient struct {
	grpc.ClientStream
}

func (x *lizardAgentRestoreClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LizardAgentServer is the server API for LizardAgent service.
// All implementations must embed UnimplementedLizardAgentServer
// for forward compatibility
type LizardAgentServer interface {
	SetEnvironment(context.Context, *SetEnvironmentRequest) (*Response, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*Response, error)
	Backup(*BackupRequest, LizardAgent_BackupServer) error
	Restore(*RestoreRequest, LizardAgent_RestoreServer) error
	mustEmbedUnimplementedLizardAgentServer()
}

// UnimplementedLizardAgentServer must be embedded to have forward compatible implementations.
type UnimplementedLizardAgentServer struct {
}

func (UnimplementedLizardAgentServer) SetEnvironment(context.Context, *SetEnvironmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnvironment not implemented")
}
func (UnimplementedLizardAgentServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedLizardAgentServer) Backup(*BackupRequest, LizardAgent_BackupServer) error {
	return status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedLizardAgentServer) Restore(*RestoreRequest, LizardAgent_RestoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedLizardAgentServer) mustEmbedUnimplementedLizardAgentServer() {}

// UnsafeLizardAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LizardAgentServer will
// result in compilation errors.
type UnsafeLizardAgentServer interface {
	mustEmbedUnimplementedLizardAgentServer()
}

func RegisterLizardAgentServer(s grpc.ServiceRegistrar, srv LizardAgentServer) {
	s.RegisterService(&LizardAgent_ServiceDesc, srv)
}

func _LizardAgent_SetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).SetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/setEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).SetEnvironment(ctx, req.(*SetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/createPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LizardAgentServer).Backup(m, &lizardAgentBackupServer{stream})
}

type LizardAgent_BackupServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type lizardAgentBackupServer struct {
	grpc.ServerStream
}

func (x *lizardAgentBackupServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _LizardAgent_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LizardAgentServer).Restore(m, &lizardAgentRestoreServer{stream})
}

type LizardAgent_RestoreServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type lizardAgentRestoreServer struct {
	grpc.ServerStream
}

func (x *lizardAgentRestoreServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// LizardAgent_ServiceDesc is the grpc.ServiceDesc for LizardAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LizardAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.LizardAgent",
	HandlerType: (*LizardAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setEnvironment",
			Handler:    _LizardAgent_SetEnvironment_Handler,
		},
		{
			MethodName: "createPolicy",
			Handler:    _LizardAgent_CreatePolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "backup",
			Handler:       _LizardAgent_Backup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "restore",
			Handler:       _LizardAgent_Restore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}
