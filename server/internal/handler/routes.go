// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	db "github.com/hongyuxuan/lizardrestic/server/internal/handler/db"
	restic "github.com/hongyuxuan/lizardrestic/server/internal/handler/restic"
	"github.com/hongyuxuan/lizardrestic/server/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/version",
				Handler: restic.VersionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/services",
				Handler: restic.ListservicesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/services/:service_name",
				Handler: restic.GetserviceHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/targets",
				Handler: restic.ListtargetsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/repository",
				Handler: restic.CreaterepoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/repository/stats",
				Handler: restic.StatsrepoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/backup",
				Handler: restic.BackupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/backup/policy",
				Handler: restic.SavepolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/backup/policy",
				Handler: restic.DeletepolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/crons",
				Handler: restic.ListcronsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/backup/policy/:policy_id/snapshots",
				Handler: restic.ListsnapshotsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/snapshots",
				Handler: restic.DeletesnapshotsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/snapshots/find",
				Handler: restic.FindsnapshotsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/snapshots/ls",
				Handler: restic.LssnapshotsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/backup/history",
				Handler: restic.ListhistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/backup/restore",
				Handler: restic.RestoreHandler(serverCtx),
			},
		},
		rest.WithPrefix("/restic"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/:tablename",
				Handler: db.ListdataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:tablename/:id",
				Handler: db.GetdataHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:tablename",
				Handler: db.CreatedataHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:tablename/:id",
				Handler: db.UpdatedataHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:tablename/:id",
				Handler: db.DeletedataHandler(serverCtx),
			},
		},
		rest.WithPrefix("/restic/db"),
	)
}
